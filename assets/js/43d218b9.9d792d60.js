"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4876],{64660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(17624),i=n(95788);const s={date:new Date("2019-10-10T00:00:00.000Z"),title:"dkron agent",slug:"dkron_agent",url:"/v2.0/cli/dkron_agent/"},o=void 0,a={id:"cli/dkron_agent",title:"dkron agent",description:"dkron agent",source:"@site/versioned_docs/version-v2/cli/dkron_agent.md",sourceDirName:"cli",slug:"/cli/dkron_agent",permalink:"/docs/v2/cli/dkron_agent",draft:!1,unlisted:!1,editUrl:"https://github.com/distribworks/dkron/tree/main/website/docs/versioned_docs/version-v2/cli/dkron_agent.md",tags:[],version:"v2",frontMatter:{date:"2019-10-10T00:00:00.000Z",title:"dkron agent",slug:"dkron_agent",url:"/v2.0/cli/dkron_agent/"},sidebar:"tutorialSidebar",previous:{title:"dkron",permalink:"/docs/v2/cli/dkron"},next:{title:"dkron doc",permalink:"/docs/v2/cli/dkron_doc"}},d={},l=[{value:"dkron agent",id:"dkron-agent",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 10-Oct-2019",id:"auto-generated-by-spf13cobra-on-10-oct-2019",level:6}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h6:"h6",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.MN)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"dkron-agent",children:"dkron agent"}),"\n",(0,r.jsx)(t.p,{children:"Start a dkron agent"}),"\n",(0,r.jsx)(t.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(t.p,{children:"Start a dkron agent that schedules jobs, listens for executions and runs executors.\nIt also runs a web UI."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"dkron agent [flags]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'      --advertise-addr string        Address used to advertise to other nodes in the cluster. By default, the bind address is advertised. The value supports go-sockaddr/template format.\n      --advertise-rpc-port int       Use the value of rpc-port by default\n      --bind-addr string             Specifies which address the agent should bind to for network services, including the internal gossip protocol and RPC mechanism. This should be specified in IP format, and can be used to easily bind all network services to the same address. The value supports go-sockaddr/template format. (default "0.0.0.0:8946")\n      --bootstrap-expect int         Provides the number of expected servers in the datacenter. Either this value should not be provided or the value must agree with other servers in the cluster. When provided, Dkron waits until the specified number of servers are available and then bootstraps the cluster. This allows an initial leader to be elected automatically. This flag requires server mode.\n      --data-dir string              Specifies the directory to use for server-specific data, including the replicated log. By default, this is the top-level data-dir, like [/var/lib/dkron] (default "dkron.data")\n      --datacenter string            Specifies the data center of the local agent. All members of a datacenter should share a local LAN connection. (default "dc1")\n      --dog-statsd-addr string       DataDog Agent address\n      --dog-statsd-tags strings      Datadog tags, specified as key:value\n      --encrypt string               Key for encrypting network traffic. Must be a base64-encoded 16-byte key\n  -h, --help                         help for agent\n      --http-addr string             Address to bind the UI web server to. Only used when server. The value supports go-sockaddr/template format. (default ":8080")\n      --join strings                 An initial agent to join with. This flag can be specified multiple times\n      --log-level string             Log level (debug|info|warn|error|fatal|panic) (default "info")\n      --mail-from string             From email address to use\n      --mail-host string             Mail server host address to use for notifications\n      --mail-password string         Mail server password to use\n      --mail-payload string          Notification mail payload\n      --mail-port uint16             Mail server port\n      --mail-subject-prefix string   Notification mail subject prefix (default "[Dkron]")\n      --mail-username string         Mail server username used for authentication\n      --node-name string             Name of this node. Must be unique in the cluster (default "pris.local")\n      --profile string               Profile is used to control the timing profiles used (default "lan")\n      --raft-multiplier int          An integer multiplier used by servers to scale key Raft timing parameters. Omitting this value or setting it to 0 uses default timing described below. Lower values are used to tighten timing and increase sensitivity while higher values relax timings and reduce sensitivity. Tuning this affects the time it takes to detect leader failures and to perform leader elections, at the expense of requiring more network and CPU resources for better performance. By default, Dkron will use a lower-performance timing that\'s suitable for minimal Dkron servers, currently equivalent to setting this to a value of 5 (this default may be changed in future versions of Dkron, depending if the target minimum server profile changes). Setting this to a value of 1 will configure Raft to its highest-performance mode is recommended for production Dkron servers. The maximum allowed value is 10. (default 1)\n      --region string                Specifies the region the Dkron agent is a member of. A region typically maps to a geographic region, for example us, with potentially multiple zones, which map to datacenters such as us-west and us-east (default "global")\n      --retry-interval string        Time to wait between join attempts. (default "30s")\n      --retry-join strings           Address of an agent to join at start time with retries enabled. Can be specified multiple times.\n      --retry-max int                Maximum number of join attempts. Defaults to 0, which will retry indefinitely.\n      --rpc-port int                 RPC Port used to communicate with clients. Only used when server. The RPC IP Address will be the same as the bind address (default 6868)\n      --server                       This node is running in server mode\n      --statsd-addr string           Statsd address\n      --tag strings                  Tag can be specified multiple times to attach multiple key/value tag pairs to the given node, specified as key=value\n      --webhook-header strings       Headers to use when calling the webhook URL. Can be specified multiple times\n      --webhook-payload string       Body of the POST request to send on webhook call\n      --webhook-url string           Webhook url to call for notifications\n'})}),"\n",(0,r.jsx)(t.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"      --config string   config file path\n"})}),"\n",(0,r.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/docs/v2/cli/dkron/",children:"dkron"}),"\t - Open source distributed job scheduling system"]}),"\n"]}),"\n",(0,r.jsx)(t.h6,{id:"auto-generated-by-spf13cobra-on-10-oct-2019",children:"Auto generated by spf13/cobra on 10-Oct-2019"})]})}function u(e={}){const{wrapper:t}={...(0,i.MN)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},95788:(e,t,n)=>{n.d(t,{MN:()=>l});var r=n(11504);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,d=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,f=p["".concat(d,".").concat(h)]||p[h]||c[h]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));u.displayName="MDXCreateElement"}}]);